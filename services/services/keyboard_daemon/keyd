#!/usr/bin/env python

import evdev
import sys
import subprocess
import setproctitle
import asyncio
import time

subprocess.check_call(["modprobe", "thinkpad_acpi"])

setproctitle.setproctitle("keyd")

time.sleep(5)   # work around not picking up keys on boot

devs = []
for path in evdev.list_devices():
    dev = evdev.InputDevice(path)
    if dev.name in ['Video Bus', 'ThinkPad Extra Buttons', 'AT Translated Set 2 keyboard']:
        devs.append(dev)

if not len(devs):
    print("FATAL: Did not find any input devices")
    sys.exit(1)

def amixer_set(control, *values):
    return subprocess.check_output(["amixer", "set", control] + list(values))

def amixer_get(control):
    return subprocess.check_output(["amixer", "get", control])

def mute():
    amixer_set("Master", "off")

def vol_change(amount):
    def changer():
        out = amixer_get("Master")
        if b'[off]' in out:
            amixer_set("Master", "on")
        else:
            amixer_set("Master", amount)
    return changer

def mic_mute():
    amixer_set("Capture", "toggle")

brt_fd = open('/sys/class/backlight/intel_backlight/brightness', 'r+')
brt_max = int(open('/sys/class/backlight/intel_backlight/max_brightness').read())
brt_fix_steps = [0, 1, 320, 640, 1280, 2560, 5120, 10240, 18000, brt_max]
brt_cur = len(brt_fix_steps) - 1
def brt_change(sign):
    def changer():
        global brt_cur

        if sign > 0:
            brt_cur += 1
        else:
            brt_cur -= 1

        if brt_cur < 0:
            brt_cur = 0
        if brt_cur >= len(brt_fix_steps):
            brt_cur = len(brt_fix_steps)-1

        brt = brt_fix_steps[brt_cur]
        print(brt)

        brt_fd.seek(0, 0)
        brt_fd.write(str(brt))
        brt_fd.flush()
    return changer

handlers = {
    evdev.ecodes.KEY_MUTE: mute,
    evdev.ecodes.KEY_VOLUMEUP: vol_change("3dB+"),
    evdev.ecodes.KEY_VOLUMEDOWN: vol_change("3dB-"),
    evdev.ecodes.KEY_F20: mic_mute,
    evdev.ecodes.KEY_BRIGHTNESSUP: brt_change(1),
    evdev.ecodes.KEY_BRIGHTNESSDOWN: brt_change(-1),
}

async def handle_events(dev):
    async for event in dev.async_read_loop():
        if event.type != evdev.ecodes.EV_KEY:
            continue
        if event.value != 1:
            continue
        if event.code in handlers:
            handlers[event.code]()

for dev in devs:
    asyncio.ensure_future(handle_events(dev))

loop = asyncio.get_event_loop()
loop.run_forever()
